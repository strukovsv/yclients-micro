"""
–ú–æ–¥—É–ª—å —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º (cron) –∏ workflow-–≤–æ—Ä–æ–Ω–∫–∞–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è:
- –û—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–º–∏ workflow (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ä–æ–Ω–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)

–í—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç HeaderEvent –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è
—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
"""

from __future__ import annotations

import logging
import re
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
import os
import json

from micro.render_ext import to_text
from micro.models.common_events import Report, InfoEvent

from pydantic import Field

from micro.models.header_event import HeaderEvent
from micro.pg_ext import fetchone, execute, returning, select

from micro.utils import str_to_timedelta, parse_time_and_adjust
from micro.send_messages import send_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß± –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class CronBaseClass(HeaderEvent):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron).

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
    """

    data: Dict[str, Any]

    @classmethod
    def create(cls, data: List[Dict[str, Any]]) -> "CronBaseClass":
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        :param data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ–±—ã—Ç–∏—è
        """
        return cls(data=data)


class Workflow(CronBaseClass):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π, —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–º–∏ workflow (–≤–æ—Ä–æ–Ω–∫–∞–º–∏).

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ workflow,
    –∞ —Ç–∞–∫–∂–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏.

    –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
        obj.data = [
            {
                "event": "StartWorkflow",
                "id": "272696997::20250811",
                "workflow": "ReactivationClient",
                "ident_id": 304734851,
                "client_id": 272696997,
                "client_name": "+79135602444 –î–∞—Ä—å—è",
                "last_training_date": datetime.date(2025, 8, 11),
                "current_record_date": None,
                "cards": None,
            }
        ]
    """

    _workflow_id: Optional[int] = None

    _js: Optional[dict] = None

    _stage: Optional[str] = None

    class Config:
        underscore_attrs_are_private = True

    def get_event(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∞—Å—Å–∞,
        –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —ç—Ç–æ –±—É–¥–µ—Ç Workflow
        """
        return self.__class__.__name__

    @property
    def event(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∞—Å—Å–∞,
        –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —ç—Ç–æ –±—É–¥–µ—Ç Workflow
        """
        return self.get_event()

    def get_js(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ç–∞–ø workflow –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        """
        if self._js:
            return self._js
        else:
            _js = self.data.get("js", self.data).copy()
            # –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ-–±—ã –Ω–µ —Å–º—É—â–∞–ª–∞
            _js.pop("stage", None)
            return _js

    @property
    def js(self) -> dict:
        return self.get_js()

    def get_workflow(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è workflow

        exammple: first_client_visit, reactivation_client

        :return str: workflow
        """
        _ = self.data.get("workflow", None)
        if not _:
            raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω workflow –≤ –ø–æ–ª–µ data: {self.data}")
        return _

    @property
    def workflow(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è workflow

        exammple: first_client_visit, reactivation_client

        :return str: workflow
        """
        return self.get_workflow()

    def get_ident_id(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è,
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ self.data
        –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É workflow_stages.ident_id

        :return str: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
        """
        _ = str(self.js.get("ident_id"))
        if not _:
            raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω ident_id –≤ –ø–æ–ª–µ data: {self.js}")
        return _

    @property
    def ident_id(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è,
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ self.data
        –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É workflow_stages.ident_id

        :return str: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
        """
        return self.get_ident_id()

    def get_stage(self) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞,
        —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ self.data

        :return Optional[str]: _description_
        """
        if not self._stage:
            self._stage = self.data.get("stage")
            if not self._stage:
                raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω stage –≤ –ø–æ–ª–µ data: {self.data}")
        return self._stage

    @property
    def capture_stage(self) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞,
        —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ self.data

        :return Optional[str]: _description_
        """
        return self.get_stage()

    def set_capture_stage(self, value):
        self._stage = value

    async def insert_into_workflow(self) -> int:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É workflow –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        """
        workflow = await returning(
            """insert into workflow (moment) values (now()) returning id"""
        )
        return workflow.get("id")

    async def get_workflow_id(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å workflow_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        """
        stage = await fetchone(
            """
SELECT workflow_id
FROM workflow_stages
WHERE event = %(event)s
  AND workflow = %(workflow)s
  AND ident_id = %(ident_id)s
  AND executed_at IS NULL""",
            {
                # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤–æ—Ä–æ–Ω–∫–∏, –ø—Ä–æ—Ü–µ—Å—Å–∞
                "event": self.event,
                # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤–æ—Ä–æ–Ω–∫–∏, –ø—Ä–æ—Ü–µ—Å—Å–∞
                "workflow": self.workflow,
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∏
                "ident_id": self.ident_id,
            },
        )
        return stage.get("workflow_id") if stage else None

    async def workflow_id(self):
        if not self._workflow_id:
            self._workflow_id = await self.get_workflow_id()
            if not self._workflow_id:
                self._workflow_id = await self.insert_into_workflow()
        return self._workflow_id

    def delay2timedelta(self, delay: Optional[str | timedelta]) -> timedelta:
        delay_timedelta: Optional[timedelta] = None
        if delay is not None:
            if isinstance(delay, str):
                delay_timedelta = str_to_timedelta(delay)
            elif isinstance(delay, timedelta):
                delay_timedelta = delay
            else:
                raise ValueError(
                    "–ü–∞—Ä–∞–º–µ—Ç—Ä 'delay' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º timedelta"
                )
        return delay_timedelta

    async def update_sql(self, data: list):
        current_timestamp = datetime.now()
        return {
            "sql": """
                    UPDATE workflow_stages
                    SET executed_at = %(current_timestamp)s,
                        data = %(data)s
                    WHERE event = %(event)s
                      AND workflow = %(workflow)s
                      AND ident_id = %(ident_id)s
                      AND executed_at IS NULL
                """,
            "params": {
                # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤–æ—Ä–æ–Ω–∫–∏, –ø—Ä–æ—Ü–µ—Å—Å–∞
                "event": self.event,
                "workflow": self.workflow,
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∏
                "ident_id": self.ident_id,
                # –ü—Ä–æ—Å—Ç–∞–º–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                "current_timestamp": current_timestamp,
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è stage
                "data": json.dumps(data, ensure_ascii=True),
            },
        }

    async def insert_sql(
        self, from_stage: str, to_stage: str, delay: str, time_str: str
    ):
        current_timestamp = datetime.now()
        started_at = current_timestamp
        # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ timedelta, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if delay:
            delay_timedelta: Optional[timedelta] = self.delay2timedelta(delay)
            started_at = current_timestamp + delay_timedelta
        if time_str:
            started_at = parse_time_and_adjust(
                base_datetime=started_at, time_str=time_str
            )
        return {
            "sql": """
INSERT INTO workflow_stages (
    event,
    workflow,
    ident_id,
    from_stage,
    stage,
    created_at,
    started_at,
    js,
    workflow_id
) VALUES (
    %(event)s,
    %(workflow)s,
    %(ident_id)s,
    %(from_stage)s,
    %(stage)s,
    %(current_timestamp)s,
    %(started_at)s,
    %(js)s,
    %(workflow_id)s
)
                    """,
            "params": {
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–¥–∞—á–∏
                "event": self.event,
                "workflow": self.workflow,
                "ident_id": self.ident_id,
                # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                "from_stage": from_stage,
                # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                "stage": to_stage,
                # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                "started_at": started_at,
                # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                "current_timestamp": current_timestamp,
                # –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç
                "js": json.dumps(self.js, ensure_ascii=True),
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä workflow_id
                "workflow_id": await self.workflow_id(),
            },
        }

    async def new_stage(
        self,
        data: list,
        to_stage: Optional[str] = None,
        delay: Optional[str | timedelta] = None,
        time_str: Optional[str] = None,
    ) -> None:

        logger.info(
            f'–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞ "{self.capture_stage}" -> "{to_stage}", delay: "{delay} {time_str}"'
        )

        # SQL-–æ–ø–µ—Ä–∞—Ü–∏–∏: –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø(—ã)
        sql_operations = [await self.update_sql(data=data)]

        # –ï—Å–ª–∏ stage –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π stage
        # –î–æ–±–∞–≤–∏—Ç—å –≤ SQL —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if to_stage:
            sql_operations += [
                await self.insert_sql(
                    from_stage=self.capture_stage,
                    to_stage=to_stage,
                    delay=delay,
                    time_str=time_str,
                )
            ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await execute(query=sql_operations)
        logger.info(f"–≠—Ç–∞–ø workflow —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {to_stage or '–∑–∞–∫—Ä—ã—Ç'}")

    async def break_rules(self, conditions: list):
        # –ü–µ—Ä–≤–æ–µ –∂–µ —É–¥–∞—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ !!!
        for condition in conditions:
            logger.info(f"test condition: {condition}")
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å
            data = await select(condition.get("file"), params=self.js)
            if data and condition.get("then"):
                self.set_capture_stage(condition.get("then"))
                logger.info(f"goto {self.capture_stage}")
                break
            elif not data and condition.get("else"):
                self.set_capture_stage(condition.get("else"))
                logger.info(f"goto {self.capture_stage}")
                break

    async def stage_worker(
        self,
        load_stages,
    ):
        logger.info(
            f'Start workflow "{self.workflow=}" :: "{self.capture_stage}"'
        )
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∏
        # –ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å workflow
        await self.workflow_id()
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á, –∏–∑ yaml
        rules = load_stages(workflow_name=self.workflow)
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏ workflow
        debug = rules.get("debug", False)
        if debug:
            logger.info(
                f'–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è workflow "{self.workflow}"'
            )

        # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ workflow
        if rules.get("break"):
            await self.break_rules(rules.get("break"))

        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ workflow
        stages = rules.get("stages", {})
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        stage = stages.get(self.capture_stage)
        if stage:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å
            data = []
            if stage.get("file"):
                data = await select(
                    stage.get("file"),
                    params=self.js,
                    template_path=f"templates/{self.workflow}",
                )
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            info = {
                "workflow_id": "#" + str(await self.workflow_id()),
                "workflow": self.workflow,
                "capture_stage": self.capture_stage,
                "desc": stage.get("desc", "-"),
                "delay": stage.get("delay", "-"),
                "data": data,
            }
            await send_message(
                workflow=self.workflow,
                stage=self.capture_stage,
                debug=debug,
                data={**self.js, **{"info": info}},
            )
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if stage.get("next"):
                await self.new_stage(
                    to_stage=stage.get("next"),
                    delay=stage.get("delay"),
                    time_str=stage.get("time"),
                    data=data,
                )
            else:
                # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–¥–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ –Ω–æ–≤–∞—è
                await self.new_stage(
                    data=data,
                )
        else:
            logger.warning(
                f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø "{self.capture_stage}" –≤ workflow "{self.workflow}"'  # noqa
            )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è cron
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class ScheduleReport(CronBaseClass):
    """
    –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    –î–∞–Ω–Ω—ã–µ –≤ `self.data` –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:
    - –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (chat_id, client_id)
    - —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    """


# class Workflow(WorkflowBase):
#     """–ë–∞–∑–æ–≤—ã–π workflow"""


# class ReactivationClient(WorkflowBase):
#     """
#     Workflow –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–∏–∏ –π–æ–≥–∏.

#     –≠—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏:
#         1. –ú—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
#         2. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
#         3. –°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
#         4. –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         5. –ê–Ω–∞–ª–∏–∑ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

#     –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30s", "2d").
#     """


# class FirstClientVisit(WorkflowBase):
#     """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
