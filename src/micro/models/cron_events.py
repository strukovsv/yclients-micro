"""
–ú–æ–¥—É–ª—å —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º (cron) –∏ workflow-–≤–æ—Ä–æ–Ω–∫–∞–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è:
- –û—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–º–∏ workflow (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ä–æ–Ω–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)

–í—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç HeaderEvent –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è
—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
"""

from __future__ import annotations

import logging
import re
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
import os
import json

from micro.render_ext import to_text
from micro.models.common_events import Report, InfoEvent

from pydantic import Field

from micro.models.header_event import HeaderEvent
from micro.pg_ext import fetchone, execute

from micro.utils import str_to_timedelta
from micro.send_messages import send_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß± –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class CronBaseClass(HeaderEvent):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron).

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
    """

    data: Dict[str, Any]

    @classmethod
    def create(cls, data: List[Dict[str, Any]]) -> "CronBaseClass":
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        :param data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ–±—ã—Ç–∏—è
        """
        return cls(data=data)


class WorkflowBase(CronBaseClass):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π, —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–º–∏ workflow (–≤–æ—Ä–æ–Ω–∫–∞–º–∏).

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ workflow,
    –∞ —Ç–∞–∫–∂–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏.

    –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
        obj.data = [
            {
                "event": "StartWorkflow",
                "id": "272696997::20250811",
                "workflow": "ReactivationClient",
                "workflow_id": 304734851,
                "client_id": 272696997,
                "client_name": "+79135602444 –î–∞—Ä—å—è",
                "last_training_date": datetime.date(2025, 8, 11),
                "current_record_date": None,
                "cards": None,
            }
        ]
    """

    def get_workflow(self) -> Optional[str]:
        return self.__class__.__name__

    def get_stage(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ç–∞–ø workflow –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        """
        return self.data.get("stage")

    def get_data(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ç–∞–ø workflow –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        """
        return self.data.get("js", self.data)

    async def to_stage(
        self,
        workflow_id: str,
        from_stage: str,
        stage: Optional[str] = None,
        delay: Optional[str | timedelta] = None,
    ) -> None:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç workflow –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç—Ç–∞–ø. –ï—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø.

        –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ `delay` ‚Äî –Ω–æ–≤—ã–π —ç—Ç–∞–ø –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.

        :param stage: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞. –ï—Å–ª–∏ None ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø.
        :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞.
                           –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30s", "1d") –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º timedelta.
        :raises ValueError: –ï—Å–ª–∏ delay –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø.
        """

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ timedelta, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        delay_timedelta: Optional[timedelta] = None
        if delay is not None:
            if isinstance(delay, str):
                delay_timedelta = str_to_timedelta(delay)
            elif isinstance(delay, timedelta):
                delay_timedelta = delay
            else:
                raise ValueError(
                    "–ü–∞—Ä–∞–º–µ—Ç—Ä 'delay' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º timedelta"
                )

        logger.info(f"–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞: {stage=}, {delay=}, {delay_timedelta=}")

        current_timestamp = datetime.now()

        # SQL-–æ–ø–µ—Ä–∞—Ü–∏–∏: –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø + —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        sql_operations = [
            {
                "sql": """
                    UPDATE workflow_stages
                    SET executed_at = %(current_timestamp)s
                    WHERE workflow = %(workflow)s
                      AND workflow_id = %(workflow_id)s
                      AND executed_at IS NULL
                """,
                "params": {
                    # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤–æ—Ä–æ–Ω–∫–∏, –ø—Ä–æ—Ü–µ—Å—Å–∞
                    "workflow": self.get_workflow(),
                    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∏
                    "workflow_id": str(workflow_id),
                    # –ü—Ä–æ—Å—Ç–∞–º–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    "current_timestamp": current_timestamp,
                },
            }
        ]

        # –ï—Å–ª–∏ stage –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ç–æ–ª—å–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π stage
        if stage is not None:
            data = self.get_data()
            # –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ-–±—ã –Ω–µ —Å–º—É—â–∞–ª–∞
            data.pop("stage", None)
            started_at = (
                current_timestamp + delay_timedelta
                if delay_timedelta
                else current_timestamp
            )
            sql_operations.append(
                {
                    "sql": """
                        INSERT INTO workflow_stages (
                            workflow,
                            workflow_id,
                            from_stage,
                            stage,
                            created_at,
                            started_at,
                            js
                        ) VALUES (
                            %(workflow)s,
                            %(workflow_id)s,
                            %(from_stage)s,
                            %(stage)s,
                            %(current_timestamp)s,
                            %(started_at)s,
                            %(js)s
                        )
                    """,
                    "params": {
                        "workflow": self.get_workflow(),
                        "workflow_id": str(workflow_id),
                        "stage": stage,
                        "current_timestamp": current_timestamp,
                        "started_at": started_at,
                        "js": json.dumps(data, ensure_ascii=True),
                        "from_stage": from_stage,
                    },
                }
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await execute(query=sql_operations)
        logger.info(f"–≠—Ç–∞–ø workflow —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {stage or '–∑–∞–∫—Ä—ã—Ç'}")

    async def stage_worker(
        self,
        funnel_name: str,
        stages: dict,
        workflow_id: str,
        debug: bool = False,
        **kwarg,
    ):
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        stage_name = self.get_stage()
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        stage = stages.get(stage_name)
        if stage:
            logger.info(f"{stage=}")
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await send_message(
                funnel_name=funnel_name,
                stage=stage_name,
                debug=debug,
                workflow=self.get_workflow(),
                workflow_id=workflow_id,
                **kwarg,
            )
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if stage.get("next"):
                await self.to_stage(
                    from_stage=stage_name,
                    workflow_id=workflow_id,
                    stage=stage.get("next"),
                    delay=stage.get("delay"),
                )
            else:
                # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
                await self.to_stage(
                    from_stage=stage_name, workflow_id=workflow_id
                )
        else:
            logger.warning(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø workflow: {stage_name} –≤ –≤–æ—Ä–æ–Ω–∫–µ: {self.get_workflow()}"  # noqa
            )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è cron
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class ScheduleReport(CronBaseClass):
    """
    –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    –î–∞–Ω–Ω—ã–µ –≤ `self.data` –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:
    - –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (chat_id, client_id)
    - —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    """


class ReactivationClient(WorkflowBase):
    """
    Workflow –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–∏–∏ –π–æ–≥–∏.

    –≠—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏:
        1. –ú—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        2. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        3. –°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        4. –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        5. –ê–Ω–∞–ª–∏–∑ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

    –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30s", "2d").
    """


class FirstClientVisit(WorkflowBase):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
